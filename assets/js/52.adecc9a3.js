(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{327:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据结构与算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法"}},[t._v("#")]),t._v(" 数据结构与算法")]),t._v(" "),s("h2",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"#10%E6%A6%82%E8%BF%B0"}},[t._v("1.0概述")])]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"#%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E4%B8%8E%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84"}},[t._v("逻辑结构与物理结构")])])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B"}},[t._v("数据类型与抽象数据类型")])])])])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"#20%E7%AE%97%E6%B3%95"}},[t._v("2.0算法")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E7%9A%84%E5%BA%A6%E9%87%8F%E6%96%B9%E6%B3%95-"}},[t._v("算法效率的度量方法 ")])])])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"#30%E6%A0%91"}},[t._v("3.0树")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#31%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86"}},[t._v("3.1二叉树的遍历")])])])])]),t._v(" "),s("h2",{attrs:{id:"_1-0概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-0概述"}},[t._v("#")]),t._v(" 1.0概述")]),t._v(" "),s("p",[t._v("1968年美国高德纳教授在所写的书中，系统阐述了...开创了数据结构的课程体系 。同年，数据结构作为一门独立的课程。之后70年代初，出现了大型程序应用数据结构与算法，算法得到人们的重视，程序设计的实质是对确定的问题选择一种好的结构，加上设计 一种好的算法。可见数据结构在程序设计中占据了重要的地位 。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/18476305640/typora@master/image/16419904787941641990478769.png",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("数据")]),t._v("  不仅仅包括整数、实型（浮点型） 数值 类型，还包括字符及声音、图像、视频等非数值类型，是计算机中可以操作的对象，能被计算机识别，并可输入给计算机处理。")]),t._v(" "),s("p",[s("code",[t._v("对数据的操作")]),t._v(" 数值型可以用来计算 ，字符数据类型，就需要进行非数值的处理，面声音、图像 、视频其实是可以通过编码的手段变成字符数据来处理的。")]),t._v(" "),s("p",[s("code",[t._v("数据元素&数据项")]),t._v("  数据项可以看作是一行记录中的一列，就像一个人，这个人的姓名是数据项，当然性别、身份证号也可以是，它是数据不可分割的最小单位。而这个人则是数据元素，它是数据项的集合，是有一定意义的基本单位。")]),t._v(" "),s("p",[s("code",[t._v("数据对象")]),t._v(" 数据对象就是“数据”， 即是数据元素的集合。")]),t._v(" "),s("p",[s("code",[t._v("数据结构")]),t._v("  这里的“结构”就是指“关系”，就像“组成分子的原子之间的排列方式”，即“不同数据元素之间不是独立的，而是存在特定的关系，我们称这些关系为结构”，即”相互之间存在一种或多种特定关系的数据元素的集合“，即”数据结构是数据的组织形式“， 而我们要学的就是它们的”组织形式” ！")]),t._v(" "),s("h3",{attrs:{id:"逻辑结构与物理结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逻辑结构与物理结构"}},[t._v("#")]),t._v(" 逻辑结构与物理结构")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/18476305640/typora@master/image/16419906469091641990646884.png",alt:""}})]),t._v(" "),s("p",[s("code",[t._v("逻辑结构")]),t._v(" 前面我们说了数据结构就是数据的组织形式，但具体有哪些组织形式呢，这就是我们数据结构主要研究的问题——逻辑结构。")]),t._v(" "),s("p",[t._v("圆型表示的是数据元素，连线表示关系。")]),t._v(" "),s("p",[t._v("1） 集合结构： 除了属于同一个集合外，它们之间没有其它关系。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/18476305640/typora@master/image/1641908274451%E6%9C%AA%E5%91%BD%E5%90%8D%E7%99%BD%E6%9D%BF.png",alt:""}})]),t._v(" "),s("p",[t._v("2）线性结构：数据元素之间是一对一的关系")]),t._v(" "),s("p",[t._v("![](<https://cdn.jsdelivr.net/gh/18476305640/typora@master/image/1641908964988未命名白板 2.png>)")]),t._v(" "),s("p",[t._v("3）树形结构：数据元素之间是一对多的关系的层次关系")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/18476305640/typora@master/image/1641909624741%E6%9C%AA%E5%91%BD%E5%90%8D%E7%99%BD%E6%9D%BF3.png",alt:""}})]),t._v(" "),s("p",[t._v("5）图形结构：数据元素之间是多对多的关系")]),t._v(" "),s("p",[t._v("![](<https://cdn.jsdelivr.net/gh/18476305640/typora@master/image/1641910249417未命名白板 4.png>)")]),t._v(" "),s("p",[s("code",[t._v("物理结构")]),t._v("   也叫存储结构，是指计算机中的存储形式，即在计算机存储器中的，存储器针对的是内存而言的。而非硬盘、软盘、光盘等外部存储器。")]),t._v(" "),s("p",[t._v("我们实质关心的是数据元素逻辑存储结构，这才是最为关键的。")]),t._v(" "),s("p",[t._v("1）顺序存储结构")]),t._v(" "),s("p",[t._v("是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的。数组就是这样的顺序存储结构。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/18476305640/typora@master/image/16419130735481641913073536.png",alt:""}})]),t._v(" "),s("p",[t._v("2）链式存储结构")]),t._v(" "),s("p",[t._v("现在如银行、医院等地方,设置了排队系统,也就是每个人去了,先领一个号,等着叫号,叫到时去办理业务或看病。在等待的时候,你爱在哪在哪,可以坐着、站着或者走动,甚至出去逛一圈,只要及时回来就行。你关注的是前一个号有没有被叫到,叫到了,下一个就轮到了。")]),t._v(" "),s("p",[t._v("链式存储结构：是把数据存放在任意的存储单元里，这组单元可以是连续的，也可以是不连续的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/18476305640/typora@master/image/16419138827271641913882712.png",alt:""}})]),t._v(" "),s("p",[t._v("显然,链式存储就灵活多了,数据存在哪里不重要,只要有一个指针存放了相应的地址就能找到它了。")]),t._v(" "),s("p",[t._v("逻辑结构是面向问题的,而物理结构就是面向计算机的,其基本的目标就是将数据及其逻辑关系存储到计算机的内存中。")]),t._v(" "),s("h3",{attrs:{id:"数据类型与抽象数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型与抽象数据类型"}},[t._v("#")]),t._v(" 数据类型与抽象数据类型")]),t._v(" "),s("p",[s("code",[t._v("数据类型")]),t._v(" 为什么要有数据类型呢？考虑的是，在计算机中,内存也不是无限大的,你要计算一个如1+1=2、3+5=8这样的整型数字的加减乘除运算,显然不需要开辟很大的适合小数甚至字符运算的内存空间。于是计算机的研究者们就考虑,要对数据进行分类,分出来多种数据类型。")]),t._v(" "),s("p",[t._v("数据类型分为原子类型与结构类型：原子类型比如整形，实型，字符型等，而结构数据类型可以分为若干数据类型的混杂。")]),t._v(" "),s("p",[s("code",[t._v("抽象数据类型")]),t._v("  (Abstract Data Type, ADT)  是指一个数学模型及定义在该模型上的一组操作。抽象数据类型的定义仅取决于它的一组逻辑特性,而与其在计算机内部如何表示和实现无关。")]),t._v(" "),s("p",[t._v("抽象数据类型不仅仅指那些已经定义并实现的数据类型,还可以是计算机编程者在设计软件程序时自己定义的数据类型,比如我们编写关于计算机绘图或者地图类的软件系统,经常都会用到坐标。也就是说,总是有成对出现的x和y,在3D系统中还有z出现,既然这三个整型数字是始终在一起出现,我们就定义一个叫 point的抽象数据类型,它有x、y、z三个整型变量,这样我们很方便地操作一个 point数据变量就能知道这一点的坐标了。")]),t._v(" "),s("h2",{attrs:{id:"_2-0算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-0算法"}},[t._v("#")]),t._v(" 2.0算法")]),t._v(" "),s("p",[s("code",[t._v("算法")]),t._v("  算法就是解决问题的方法，这个方法表现为求解步骤的描述，在计算机表现为指令的有限序列，并且每条指令表示为一个或多个操作。没有用的算法，就像没有包治百病的药一样。")]),t._v(" "),s("p",[s("code",[t._v("算法的特征")]),t._v(" 有五个，输入、输出、有穷性、确定性和可行性。")]),t._v(" "),s("p",[t._v("输入输出：输出可以是打印输出或返回一个或多个值等。不然这个算法也就没了意义。")]),t._v(" "),s("p",[t._v("有穷性：算法是执行有限的步骤得出结果的。自动结束而不会出现无限循环。")]),t._v(" "),s("p",[t._v("确定性：相同的输入只能有唯一的输出结果。")]),t._v(" "),s("p",[t._v("可行性：算法的每一步都必须是可行的,也就是说,每一步都能够通过执行有限次数完成。可行性意味着算法可以转换为程序上机运行,并得到正确的结果。")]),t._v(" "),s("p",[s("code",[t._v("对算法的要求")])]),t._v(" "),s("p",[t._v("正确性：算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求、能够得到问题的正确答案。")]),t._v(" "),s("p",[t._v("算法程序本身没有语法错误，并且对合法的输入、不合法甚至刁难的测试数据都有满足要求的输出结果。")]),t._v(" "),s("p",[t._v("可读性：算法设计的另一目的是为了便于阅读、理解和交流。")]),t._v(" "),s("p",[t._v("健壮性：当输入数据不合法时,算法也能做出相关处理,而不是产生异常或莫名其妙的结果。")]),t._v(" "),s("p",[t._v("时间效率高和存储量低：时间效率高的算法可以节省很多不必须的支出。设计算法应该尽量满足时间效率高和存储量低的需求。")]),t._v(" "),s("h3",{attrs:{id:"算法效率的度量方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法效率的度量方法"}},[t._v("#")]),t._v(" 算法效率的度量方法 ")]),t._v(" "),s("p",[s("strong",[t._v("事后统计方法")]),t._v("：利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。")]),t._v(" "),s("p",[t._v("这种方法显然有很大的缺陷：这种比较方法依赖计算机硬件和软件的等环境因素，且跟运算的数据规模有很大的关系。所以我们考虑不予采纳！")]),t._v(" "),s("p",[s("strong",[t._v("事前统计方法")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("算法是解决问题一思路，还不是程序。 算法要有正确性、可读性、健壮性、高效性与低存储量。")])]),t._v(" "),s("li",[s("p",[t._v("算法的时间复杂度：问题的规模、语句的频度。 使用O(f(n))表示 ，常用的时间复杂性有：O(1)、O(logn)、O(n)、O( nlogn)、O(n^2)、O(n^3)、O(2^n)")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1nE411x7qP?from=search&seid=454824815628251978&spm_id_from=333.337.0.0",title:"时间复杂度教程",target:"_blank",rel:"noopener noreferrer"}},[t._v("时间复杂度教程"),s("OutboundLink")],1),t._v("， 总结：")]),t._v(" "),s("p",[t._v("① T(n) =次数表示式，表示的是执行的次数； O(n) 通过T(n)的抓大头等操作后这就是时间复杂度，有O(1)、O(logn)、O(n)、O( nlogn)、O(n^2)、O(n^3)、O(2^n) 这些， 对应的结构是：")]),t._v(" "),s("p",[t._v("O(1) : 有if else语句的，取大的，没有for循环体的最上而下的时间复杂性是O(n)")]),t._v(" "),s("p",[t._v("O(n): 有一层for循环的")]),t._v(" "),s("p",[t._v("O(n^a): 有a层for 循环的")]),t._v(" "),s("p",[t._v("O(logn) : for (int i=1; i < n; i*=2) {..} T(n)=log2n-1 时间复杂度为O(logn)")]),t._v(" "),s("p",[t._v("② 注意，1、如果有两个同级的for循环取最大的。 O(n) < O(n^2)")]),t._v(" "),s("p",[t._v("③ 特别地：for (int i=0; i < n; ++i) {")]),t._v(" "),s("p",[t._v("for (int j=i; j < n; ++j) {...}")]),t._v(" "),s("p",[t._v("}")]),t._v(" "),s("p",[t._v("这种只需算最深层执行的次数即可，T(n) = n + (n-1) + (n-2) + (n-3) + ... +2+1 = Sn = [(1+n)n]/2 即时间复杂度为O(n^2), 也是符合a层循环，时间复杂度为O(n^a) 的。")])])]),t._v(" "),s("h2",{attrs:{id:"_3-0树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-0树"}},[t._v("#")]),t._v(" 3.0树")]),t._v(" "),s("h3",{attrs:{id:"_3-1二叉树的遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1二叉树的遍历"}},[t._v("#")]),t._v(" 3.1二叉树的遍历")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 关于遍历：前中后只是访问的位置不同+遍历的左右的前后不同（要有单元性的思想），代码一样，层序遍历更简单，层序遍历是要记住的遍历。\n     * 层序遍历（while）: 自上而下，从左到右\n     * 前序遍历（递归）： [根]左右\n     * 中序遍历（递归）: 左[根]右\n     * 后序遍历（递归）： 左右[根]\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//前序遍历——“根左右”，递归左右子树都要查看是否暂停（visitor.stop）")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("preorderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Visitor")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果要操作的节点不存在（下面传递的左右子树），直接返回")]),t._v("\n        visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("visit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//读取根节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("preorderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//递归左子树")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("preorderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//递归右子树")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//后序遍历——即“左右根”")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Visitor")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果要操作的节点不存在（下面传递的左右子树），直接返回")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//递归左子树")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//递归右子树")]),t._v("\n        visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("visit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问根节点")]),t._v("\n\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//中序遍历——“左根右”  升降序")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Visitor")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果要操作的节点不存在（下面传递的左右子树），直接返回")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//递归左子树")]),t._v("\n        visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("visit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//访问根节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inorderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//递归右子树")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//层序遍历——没有用到递归！！")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LevelOrderTraversal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Visitor")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Queue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" us "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//需要用到一个队列")]),t._v("\n        us"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//要存入根节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("us"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//开始进行有机的poll-push")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" uNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" us"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("poll")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//poll一个节点，")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("visitor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("visit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第个节点都会弹出，且按自上而下从左到右输出，我们只需读取每个弹出的节点即可")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" us"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//push进该节点的左节点")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" us"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uNode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//push进该节点的右节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);