(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{289:function(t,a,r){"use strict";r.r(a);var s=r(10),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[t._v("#")]),t._v(" 线程池")]),t._v(" "),a("h3",{attrs:{id:"线程池的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池的意义"}},[t._v("#")]),t._v(" + 线程池的意义")]),t._v(" "),a("p",[t._v("线程是稀缺资源，它的创建与销毁是比较重且耗资源的操作。而Java线程依赖于内核线程，创建线\n程需要进行操作系统状态切换，为避免资源过渡消耗需要设法重用线程执行多个任务。线程池就是\n一个线程缓存，负责对线程进行统一分配、调优与监控。")]),t._v(" "),a("h3",{attrs:{id:"线程池优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池优势"}},[t._v("#")]),t._v(" + 线程池优势：")]),t._v(" "),a("p",[t._v("重用存在的线程，减少线程创建，消亡的开销，提高性能提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")]),t._v(" "),a("h3",{attrs:{id:"_1-executor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-executor"}},[t._v("#")]),t._v(" [_1_] Executor")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://fastly.jsdelivr.net/gh/18476305640/typora@master/image/16552126284211655212627653.png",alt:""}})]),t._v(" "),a("p",[t._v("说明：当我们的固定线程在忙时，又有几个任务进来了，会先放在队列中，队列也满了就创建临时线程，如果临时线程也满了，就开启拒绝策略。")])])}),[],!1,null,null,null);a.default=e.exports}}]);